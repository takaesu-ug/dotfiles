" プラグインごとの設定
" ====================

"------------------------------------
" netrw
"------------------------------------
" netrwは常にtree view
let g:netrw_liststyle = 1
" CVSと.で始まるファイルは表示しない
"let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" tcomment.vim
"------------------------------------
let g:tcomment_mapleader1 = '<C-_>' "(default: '<c-_>')
let g:tcomment_opleader1 = 'gc'     "(default: 'gc')

" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
\}

" マッピングを追加
function! SetErubyMapping2()
  nmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  nmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  nmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>

  vmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  vmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  vmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>
endfunction

" erubyのときだけ設定を追加
au FileType eruby call SetErubyMapping2()
" phpのときだけ設定を追加
au FileType php nmap <buffer><C-@>c :TCommentAs php_surround<CR>
au FileType php vmap <buffer><C-@>c :TCommentAs php_surround<CR>

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

"------------------------------------
" accelerated-jk
"------------------------------------
let g:accelerated_jk_acceleration_table = [10,5,3]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

"------------------------------------
" quickrun.vim
"------------------------------------
" 初期化
let g:quickrun_config = {}
" キーバインド設定（デフォルト \ + r で実行)
nmap <Leader>rr <plug>(quickrun)

"------------------------------------
" シンタックス(syntax checker)
" https://github.com/w0rp/ale
" http://wonderwall.hatenablog.com/entry/2017/03/01/223934
"------------------------------------
" エラー行に表示するマーク
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" loction list, quickFix
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

let g:ale_statusline_format = ['✗ %d', '⚠ %d', '⬥ ok']

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Set this setting in vimrc if you want to fix files automatically on save. This is off by default.
" 次のコマンドでfixersを実行する
"   :ALEFixSuggest Fixerの種類を確認
"   :ALEFix  実際にFixer実行
let g:ale_fix_on_save = 1

" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8', 'mypy'],
\}

" Put this in vimrc or a plugin file of your own.
" After this is configured, :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
\   'python': ['autopep8', 'isort'],
\   'javascript': ['prettier'],
\}

" シェルスクリプトにしたらできる...
" Vim, ALE, Docker, and Per-Project Linting | Ryan McGrath
" https://rymc.io/blog/2019/vim-ale-docker-per-project-linting/
"
" let g:ale_ruby_rubocop_executable = 'docker-compose run -T --rm sense_api bundle exec rubocop'
let g:ale_ruby_rubocop_executable = '.bin/rubocop'

"------------------------------------
" itchyny/lightline.vim
"------------------------------------
let g:lightline = {
    \ 'colorscheme': 'powerline',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'ale' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'percent' ],
    \              [ 'gitbranch', 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'fugitive#head',
    \   'ale': 'ALEGetStatusLine',
    \   'filename': 'LightlineFilename',
    \ },
    \ }
function! LightlineFilename()
  let filename = expand('%') !=# '' ? expand('%') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

"----------------------------------------
" open-browsere
"----------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" indent_guides
"------------------------------------
" http://qiita.com/alpaca_taichou/items/fb442cfa78f91634cfaa
" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
" デフォルトで有効にするファイルタイプ
au FileType javascript,yaml,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle"

"------------------------------------
" fzf.vim
"------------------------------------
" https://github.com/junegunn/fzf/wiki/Examples-(vim)
" https://github.com/junegunn/fzf#usage-as-vim-plugin
" コマンドはこれを参照 https://github.com/junegunn/fzf.vim#commands
set rtp+=/usr/local/opt/fzf
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
nnoremap <silent> <C-p><C-f> :FZF<CR>
nnoremap <silent> <C-p><C-m> :FZFMru<CR>

command! FZFMru call fzf#run(fzf#wrap({
  \ 'source':  reverse(s:all_files()),
  \ 'options': '-m -x +s',
  \ 'down':    '40%' }))

function! s:all_files()
  return extend(
  \ filter(copy(v:oldfiles),
  \        "v:val !~ 'fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"),
  \ map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'))
endfunction


"------------------------------------
" vim-terraform
"------------------------------------
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1

"------------------------------------
" coc.nvim
" https://www.youtube.com/watch?v=gnupOrSEikQ
" https://qiita.com/Amadeus_vn/items/5dfcf8d3676c2c5576ef
"------------------------------------
" " Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)
" " set pumblend=10

let g:coc_global_extensions = [
    \ 'coc-marketplace',
    \ 'coc-snippets',
    \ 'coc-pairs',
    \ 'coc-lists',
    \ 'coc-json',
    \ 'coc-html',
    \ 'coc-emmet',
    \ 'coc-css',
    \ 'coc-tsserver',
    \ 'coc-solargraph',
    \ 'coc-styled-components',
    \ 'coc-yaml',
    \ ]
