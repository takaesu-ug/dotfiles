"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------
"------------------------------------
" netrw
"------------------------------------
" netrwは常にtree view
let g:netrw_liststyle = 1
" CVSと.で始まるファイルは表示しない
"let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"------------------------------------
" VimFiler
" K => 新規フォルダ
" N => 新規ファイル
" Space => 選択
" r => リネーム
"------------------------------------
" 「:e」でvimfilerを開くように変更
let g:vimfiler_as_default_explorer = 1
" vimfilerのセーフモードを解除 （切替はgs）
let g:vimfiler_safe_mode_by_default = 0

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" tcomment.vim
"------------------------------------
let g:tcommentMapLeader1 = '<C-_>'       "(default: '<c-_>')
" let g:tcommentMapLeader2 = '<Leader>'    "(default: '<Leader>_')
let g:tcommentMapLeaderOp1 = 'gc'        "(default: 'gc')
let g:tcommentMapLeaderOp2 = 'gC'        "(default: 'gC')

" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
\}

" マッピングを追加
function! SetErubyMapping2()
  nmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  nmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  nmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>

  vmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  vmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  vmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>
endfunction

" erubyのときだけ設定を追加
au FileType eruby call SetErubyMapping2()
" phpのときだけ設定を追加
au FileType php nmap <buffer><C-@>c :TCommentAs php_surround<CR>
au FileType php vmap <buffer><C-@>c :TCommentAs php_surround<CR>

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags
"set tags+=~/.tags
let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
"map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

"------------------------------------
" accelerated-jk
"------------------------------------
let g:accelerated_jk_acceleration_table = [10,5,3]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

"------------------------------------
" unite.vim
" uniteを開いた時に tab (C-i) でアクションのビューを表示する
"------------------------------------
" Start insert.
let g:unite_enable_start_insert = 1

" ヒストリー/ヤンク機能を有効化
let g:unite_source_history_yank_enable =1

" The prefix key.
nnoremap    [unite]   <Nop>
nmap        <Space><Space> [unite]

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" ヒストリ/ヤンクを表示
nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
" レジストリを表示
noremap <silent> [unite]r :<C-u>Unite<Space>register<CR>
" ptコマンドを使ってgrep実行
nnoremap <silent> [unite]g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
if executable('pt')
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif
" unite-git-conflict 起動
nnoremap <silent> [unite]gc :<C-u>Unite git-conflict<CR>

" unite.vimを開いている間のキーマッピング
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  "" Overwrite settings.
  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC> <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200


"------------------------------------
" fugitive.vim , vimgrep(:vim)に関して
" http://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b
"------------------------------------
" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}


"------------------------------------
" quickrun.vim
"------------------------------------
" 初期化
let g:quickrun_config = {}
" キーバインド設定（デフォルト \ + r で実行)
nmap <Leader>rr <plug>(quickrun)
augroup QuickRunUnitTest
    autocmd!
    " Perl(*.t)ファイルのテストはproveを使うための追加
    autocmd BufWinEnter,BufNewFile *.t set filetype=perl.unit
    " Ruby用
    autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
let g:quickrun_config['perl.unit'] = {'command': 'prove', 'cmdopt': '-lv -MProject::Libs'}
let g:quickrun_config['ruby.rspec'] = {
    \'command'                  : 'rspec',
    \'cmdopt'                   : '-cfd',
    \'args'                     : "%{line('.')}",
    \'exec'                     : ['bundle exec %c %o %s:%a'],
    \'outputter/buffer/filetype': 'rspec-result',
    \'filetype'                 : 'rspec-result'
    \}


"------------------------------------
" Syntastic(シンタックスエラープラグイン)
"------------------------------------
" HTMLは色々エラるのでとりあえずチェックしない
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html'] }
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = 'E>'
let g:syntastic_warning_symbol = 'W>'
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
" エラったときQuickfixが立ち上がる
let g:syntastic_auto_loc_list = 1

" syntasticを使う際には必ずcheckerを指定しようというお話
"   http://yuzuemon.hatenablog.com/entry/2014/04/17/022417
" $HOME当たりにベースとなる.eslintrcを配置する
"".eslinntrc
"" env:
""   es6: true
""   browser: true
""   node: true
""
"" parserOptions:
""   ecmaFeatures:
""     jsx: true
""
"" rules:
""   strict: 0
""   semi:
""     - 2
""     - always
let g:syntastic_javascript_checkers = ['eslint']

" http://stackoverflow.com/questions/29635150/how-do-i-fix-this-annoying-syntastic-rails-error
let g:syntastic_eruby_ruby_quiet_messages =
    \ {'regex': 'possibly useless use of a variable in void context'}

"------------------------------------
" vim-jsx
"------------------------------------
let g:jsx_ext_required = 0        " ファイルタイプがjsでも読み込む．
let g:jsx_pragma_required = 0     " @から始まるプラグマでは読み込まない．


"------------------------------------
" vim-nodejs-complete
"------------------------------------
let g:node_usejscomplete = 1


"------------------------------------
" emmet-vim(zencoding)
"------------------------------------
" >は下の階層
" +は同階層
" *数値は個数
" $は連番が入る $を並べた数の桁が使える
" .はクラス名 #はID名
" ()はブロックにできる 複雑な階層があるときなどに使用
"example
" div>(ul>li*5)+span
" a[href=http// sytle=display:none;] → <a href="http//" sytle="display:none;"></a>
let g:user_emmet_leader_key='<C-e>'

let g:user_emmet_settings = {
\  'variables': {
\    'lang' : 'ja'
\  },
\  'custom_expands' : {
\    '^\%(loremj\|lipsumj\)\(\d*\)$' : function('emmet#lorem#ja#expand')
\  }
\}


"----------------------------------------
" open-browsere
"----------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" indent_guides
"------------------------------------
" http://qiita.com/alpaca_taichou/items/fb442cfa78f91634cfaa
" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
" デフォルトで有効にするファイルタイプ
au FileType javascript,yaml,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle"

"------------------------------------
" fzf.vim
"------------------------------------
" https://github.com/junegunn/fzf/wiki/Examples-(vim)
" https://github.com/junegunn/fzf#usage-as-vim-plugin
" コマンドはこれを参照 https://github.com/junegunn/fzf.vim#commands
set rtp+=/usr/local/opt/fzf
let g:fzf_layout = { 'down': '~40%' }
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
nnoremap <silent> <C-p><C-f> :FZF<CR>
nnoremap <silent> <C-p><C-m> :FZFMru<CR>

command! FZFMru call fzf#run(fzf#wrap({
  \ 'source':  reverse(s:all_files()),
  \ 'options': '-m -x +s',
  \ 'down':    '40%' }))

function! s:all_files()
  return extend(
  \ filter(copy(v:oldfiles),
  \        "v:val !~ 'fugitive:\\|NERD_tree\\|^/tmp/\\|.git/'"),
  \ map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'))
endfunction

"------------------------------------
" vim-go
"------------------------------------
" :GoBuild 時にエラーのある行にジャンプしない
let g:go_jump_to_error = 0
" ファイル保存時に実行されるコード整形で使用するツール名
let g:go_fmt_command = 'goimports'
" キーワードコマンドとして godoc を使わない
let g:go_doc_keywordprg_enabled = 0
" タグジャンプのキーを godef の動作で置き換える
let g:go_def_mapping_enabled = 1
" ハイライトを有効にする
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_string_spellcheck = 1
" 新規ファイルでテンプレートを適用しない
let go_template_autocreate = 0
" vimproc を使わず job を使う
let g:go#use_vimproc = 0

" C-x C-o で補完候補を表示させる(gocode)
" importしていないパッケージも保管する
let g:go_gocode_unimported_packages = 1

"------------------------------------
" ultiSnips
"------------------------------------
let g:UltiSnipsExpandTrigger = '<c-e><c-u>'
let g:UltiSnipsListSnippets = '<c-e><c-i>'

"------------------------------------
" vim-terraform
"------------------------------------
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1


"------------------------------------
" jiangmiao/simple-javascript-indenter
"------------------------------------
let g:SimpleJsIndenter_BriefMode = 1
let g:SimpleJsIndenter_CaseIndentLevel = -1

" DOMとMozilla関連とES6のメソッドを補完
let g:jscomplete_use = ['dom', 'moz']
