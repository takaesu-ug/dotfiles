*vcs.txt*	総合 VCS プラグイン。

Version: 0.1.0
Author : thinca <thinca+vim@gmail.com>
License: クリエイティブ・コモンズの表示 2.1 日本ライセンス
         <http://creativecommons.org/licenses/by/2.1/jp/>

==============================================================================
目次						*vcs-contents*

概要				|vcs-introduction|
インターフェース		|vcs-interface|
  コマンド			  |vcs-commands|
  関数				  |vcs-functions|
  グローバルオプション		  |vcs-global-options|
カスタマイズ			|vcs-customizing|
構造				|vcs-structure|
  本体				  |vcs-core|
  type				  |vcs-type|
  cmd				  |vcs-cmd|
モジュールの開発		|vcs-development-modules|
  type モジュールの開発		  |vcs-development-type|
  cmd モジュールの開発		  |vcs-development-cmd|
更新履歴			|vcs-changelog|


==============================================================================
概要						*vcs-introduction*

*vcs* は、様々なバージョン管理システムに対して共通のインターフェースを提供する
プラグインです。

** 注意 **
- このプラグインはまだ実験段階です。
- このドキュメントには未実装の機能も含まれています。
- あらゆる機能/仕様は今後予告なく変更されることがあります。

要件:
- Vim 7.3 以降
- |vimproc| 5 以降	(https://github.com/Shougo/vimproc)
- |openbuf| 0.1.0 以降	(https://github.com/thinca/vim-openbuf)

最新版:
https://github.com/thinca/vim-vcs



==============================================================================
インターフェース				*vcs-interface*

------------------------------------------------------------------------------
コマンド					*vcs-commands*

:Vcs [options] {cmd} [arguments]		*:Vcs*
			{cmd} を実行します。
			[options] は - で始まる引数で、以下の形式のいずれかで
			す。

			-option
			-option=value

			基本的に全ての {cmd} に共通で指定できますが、{cmd} に
			よっては指定できないオプションもあります。
			オプションのリストは |vcs-global-options| にあります。


------------------------------------------------------------------------------
関数						*vcs-functions*

vcs#vcs({cmd} [, {arguments}] [, {options}])	*vcs#vcs()*
			|:Vcs| コマンドの関数版です。辞書を指定した場合、それ
			を {options} として扱います。


vcs#detect([{file}])				*vcs#detect()*

vcs#info({format}, [{action-format}])		*vcs#info()*
			VCSの情報をフォーマット形式で表示します。
			{action-format}は、アクション文字列が存在するとき、
			{format}の代わりに使用されます。
			{format}には以下のフォーマット指定子を使用できます。
			%% : %そのもの
			%a : アクション文字列
			%b : カレントブランチ名
			%p : リモートにプッシュされていなければ"?"
			%r : リポジトリ名
			%R : リポジトリのパス
			%s : VCSの名前
			%S : リポジトリからの相対パス
>
	let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
<

------------------------------------------------------------------------------
グローバルオプション				*vcs-global-options*

|:Vcs| コマンドや |vcs#vcs()| 関数に指定できるオプションの一覧です。

-type={type}					*vcs-global-option-type*
			使用する type モジュールを明示的に指定します。省略した
			場合は、現在のバッファやディレクトリから自動的に検出さ
			れます。


==============================================================================
カスタマイズ					*vcs-customizing*

g:vcs#config					*g:vcs#config*
	設定用の辞書です。以下の要素を含むことができます。

	alias					*g:vcs#config-alias*
	辞書でエイリアスを定義します。詳しくは |vcs-alias| を参照してくださ
	い。

	cache_dir				*g:vcs#config-cache_dir*
	リポジトリの情報をキャッシュするディレクトリを指定します。絶対パスか
	相対パスになります。相対パスの場合、リポジトリのルートからの位置にな
	ります。

	log_file				*g:vcs#config-log_file*
			記録用バッファ(|vcs-record-buffer|)の内容を書き出す
			ファイルを指定します。空文字列の場合はファイルへ書き出
			しません。
			デフォルトは空文字列です。

	cmd					*g:vcs#config-cmd*
	各コマンドに対する設定です。コマンド名をキーにした辞書です。

	type					*g:vcs#config-type*



==============================================================================
構造						*vcs-structure*

vcs プラグインは、本体と、cmd、type の 2 種類のモジュールから成ります。

------------------------------------------------------------------------------
本体						*vcs-core*

リポジトリの管理				*vcs-repository*
================
vcs プラグインは検出したリポジトリに関する情報を管理し、速度のためにリポジトリ
の情報を内部変数やファイルにキャッシュします。
1 つのジポジトリは内部で辞書で管理されています。編集中のファイルがリポジトリ
内にある場合、バッファ変数 |b:vcs_repos| に対応する辞書への参照が 格納されま
す。

エイリアス					*vcs-alias*
==========
|:Vcs| コマンドに対するエイリアスを管理できます。


------------------------------------------------------------------------------
type						*vcs-type*

具体的な VCS に対する機能を提供します。1 つの type が具体的な 1 つの VCS に対
応します。
type は辞書で、様々な機能(|vcs-feature-list|)を関数で提供します。基本的に同じ
名前の機能は対応する同じ動作をする必要があります。


------------------------------------------------------------------------------
cmd						*vcs-cmd*

抽象的なコマンドを提供します。このコマンドは |:Vcs| コマンドの {cmd} として機
能します。
cmd は type の機能に依存します。type に必要な機能が提供されていなかった場合、
そのcmd は使用できません。



==============================================================================
モジュールの開発				*vcs-development-modules*

モジュールは規定の要素を持った辞書です。

------------------------------------------------------------------------------
type モジュールの開発				*vcs-development-type*

type モジュールは以下の要素を含む必要があります。

name			モジュール名です。

type モジュールは実行中に以下の要素を仮定できます。これは実行時に本体によって
設定されます。逆に言うと、これらの名前は予約されているので使用できません。
また、type モジュールはリポジトリ毎にコピーされます。よって以下の要素は、リポ
ジトリ毎に独立した値を持ちます。

repos						*vcs-type-repos*
	リポジトリに関する情報を保持する辞書です。

機能						*vcs-feature*
======

機能リスト					*vcs-feature-list*
==========
以下はコアモジュールで定義されている機能の一覧です。
- 引数が {files} のように複数形の場合は、リストを受け取ります。
- 引数としてリビジョンを受け取る場合、その指定方法は type 固有になります。

detect({file})					*vcs-feature-detect()*
	指定したファイルがこの type の作業ディレクトリに含まれているかを調べま
	す。

root({file})					*vcs-feature-root()*
	指定したファイルが所属する作業ディレクトリのルートディレクトリを返しま
	す。


add({files})					*vcs-feature-add()*
	指定したファイルをバージョン管理下に追加します。

annotate({file})				*vcs-feature-annotate()*

branch()					*vcs-feature-branch()*

cat({file}, {rev})				*vcs-feature-cat()*
	特定のリビジョンのファイルを取り出します。戻り値は文字列です。

commit({info} [, {files}])			*vcs-feature-commit()*
	リストで指定したファイルをコミットします。ファイルを 1 つも指定しな
	かった場合、全てのファイルをコミットします。
	{info} にはコミットに必要な情報を辞書で渡します。以下の要素を持ちます。
	全ての要素は省略可能です。
	"msgfile":	コミットメッセージが書かれたファイル名です。
	"date":		コミット日時です。指定できない場合もあります。

diff([{files} [, {from} [, {to}]]])		*vcs-feature-diff()*
	ファイルの差分を diff 形式で取得します。可能な限り unified 形式で返す
	べきです。
	{files} が空の場合は、リポジトリの全ファイルを対象とします。
	{files} がディレクトリだった場合は、ディレクトリ以下の全ファイルを対象
	とします。
	{from}, {to} はリビジョンです。

info()						*vcs-feature-info()*
	作業ディレクトリの情報を辞書で返します。
	TODO: 戻り値の形式

log([{filter}])					*vcs-feature-log()*
	リポジトリのログを取得します。ログの形式は type に依存します。
	{filter} によって取得するログを制限できます。{filter} は以下の任意の要
	素を持つ辞書です。
	"files":	ファイル名のリストです。
	"limit":	取得するログの最大値です。
	"rev":		リビジョンです。
	"offset":	取得を開始する位置を指定します。

logformat({log})				*vcs-feature-logformat()*
logformat({filter})
	ログを解析して、構造化された共通形式に変換します。引数には、文字列であ
	る |vcs-feature-log()| の戻り値を {log} として渡すか、もしくは
	|vcs-feature-log()| と同じ形式の {filter} を渡します。
	戻り値は以下の要素を持つ辞書のリストです。
	"revision":	リビジョンを表す文字列です。
	"author":	コミッターです。
	"date":		コミットの日付けです。形式は type に依存します。
	"message":	コミットメッセージです。

pull()						*vcs-feature-pull()*
	サーバから変更を取得します。

push()						*vcs-feature-push()*
	サーバへローカルのコミットを送信します。

revno({rev})					*vcs-feature-revno()*
	vcs で共通で使えるリビジョンの表現を type 固有の表現へ変換します。

run([{args}, ...])				*vcs-feature-run()*
	生のコマンドを実行します。この機能は type によって結果が大きく違うので
	注意して使う必要があります。通常は内部で使用されます。

stash()						*vcs-feature-stash()*
	作業ディレクトリ内の変更を一時的に取り除きます。

status({files})					*vcs-feature-status()*
	渡された各ファイルの作業ディレクトリ内での状態を、ファイル名をキー、状
	態を値とした辞書で返します。状態には以下のものがあります。
	"unmodified"	変更なし
	"added"		追加された
	"conflicted"	衝突している
	"deleted"	削除された
	"ignored"	無視されている
	"modified"	変更された
	"unknown"	バージョン管理されていない
	"missing"	管理下だがファイルがない
	状態は type によって独自に追加されることがあります。
	{files} が省略された場合、変更されているファイルの情報を返します。

switch({to})					*vcs-feature-switch()*

機能の追加					*vcs-add-feature*
==========


------------------------------------------------------------------------------
cmd モジュールの開発				*vcs-development-cmd*

depends()					*vcs-cmd-attr-depends()*
	コマンドが依存する機能(|vcs-feature|)の名前のリストを返します。
	機能が提供されていない場合、このコマンドは利用できません。

execute(...)



==============================================================================
更新履歴					*vcs-changelog*

0.0.0	2011-01-10
	- 実験版。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
