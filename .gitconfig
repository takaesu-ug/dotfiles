[include]
    path = ~/dotfiles/.gitconfig.local
    #[github]ディレクティブでuserとpassなどを設定
[color]
    ui = auto
[pager]
    log = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less
    show = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less
    diff = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less
[alias]
    st = status
    stt = status -s -b
    co = checkout
    ci = commit
    br = branch
    lgl = log --date=local
    log-one = log --all --oneline --decorate --graph
    lg = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
    log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
    hist = log '--pretty=format:\\\"%h %ad | %s%d [%an]\\\"' --graph --date=short

    # svn-ref [svnのrivision]  gitのハッシュを確認できる(svnリビジョンを複数指定した時はsvnのリビジョンの昇順で表示する)
    #プログラム的にはdoのあとでretsvn(retsvn=${retsvn}' '${rev};) と ret(ret=${ret}' '`git log --grep "git-svn-id.*@${rev}" --pretty=%H;`;)を作っている.
    #それぞれにforで回しながら代入している.
    svn-ref = "!f() { ret=''; retsvn=''; for rev in `echo $@ | tr ' ' \"\n\" | sort -n | xargs echo;`; do retsvn=${retsvn}' '${rev}; ret=${ret}' '`git log --grep "git-svn-id.*@${rev}" --pretty=%H`; done; echo $ret; echo $retsvn; }; f"

    # svn-diff [オプション(--name-statusなど)]   git svn dcommitする前にdiffの確認ができる
    svn-diff = "!f() { git svn dcommit -n | grep diff | awk -F'diff-tree' -v opt=$@ '{print \"git diff \"opt\" \"$2}' | sh; }; f"
    # svn-br-rm   リモートのsvnから削除されたローカルのブランチやタグが表示される % git svn-br-rm |sh で実行することも出来る
    # svn-br-rm = "~/bin/git-svn-br-rm"

    #git-diff関係
    diffr = diff --word-diff-regex='\\w+|[^[:space:]]'
    diffrr = diff --color-words --word-diff-regex='\\w+|[^[:space:]]'
    diffw = diff --word-diff

    #git-cherry関連(コミット間のdiff)
    # colorized cheery -v
    cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
    ## git log部分の解説(以下のようなshowコマンドになっている) \047 => シングルコート
    # ・git show --date=short --no-notes --pretty=format:'%Cgreen+ %h %Cgreen%cd %Cblue%cn%x09%Creset%s' --summary 62b7de0'
    # ・awk内でのgetline、close  cmdは任意のコマンドとして（git show)を実行している
    #   getlineで読み込んだcmdのコマンドを明示的にcloseさせている

[tig]
    show-refs = yes
    show-line-numbers = yes
    line-number-interval = 1
    show-date = local
[tig "color"]
    cursor     = white red underline
    title-blur = white magenta


