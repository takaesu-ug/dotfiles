[user]
    name = Yuji Takaesu
    email = taka.esu.user@gmail.com

[core]
    attributesFile = ~/.gitattributes
    editor = vim -U NONE -u NONE -c \"set fenc=utf-8\" -c \"syntax enable\"
    quotepath = false
[color]
    ui = auto
[pager]
    log = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less -q -X -F
    show = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less -q -X -F
    diff = `brew --prefix git`/share/git-core/contrib/diff-highlight/diff-highlight | less -q -X -F
[alias]
    st = status
    stt = status -s -b
    co = checkout
    ci = commit
    br = !git --no-pager branch

    # https://speakerdeck.com/a_matsuda/my-favorite-tools?slide=42
    loga = log -p --stat --reverse --abbrev-commit --decorate --topo-order
    lga = log --graph --all --abbrev-commit --pretty=format:'%x09 %Cred%h%Creset %Cgreen%ai %C(bold blue)(%an) -%C(yellow)%d%Creset %s%Creset'
    lg  = log --graph       --abbrev-commit --pretty=format:'%x09 %Cred%h%Creset %Cgreen%ai %C(bold blue)(%an) -%C(yellow)%d%Creset %s%Creset'
    lgd = log --oneline --graph --decorate=full
    lgstat =  log --oneline --decorate --stat
    log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
    log-one = log --all --oneline --decorate --graph
    lgl = log --date=local
    hist = log --graph --date=short --pretty='format:%h %ad | %s%d [%an]'
    # Gitでファイルの特定行の変更履歴を追う - Qiita https://qiita.com/kmagai/items/51d814fa931359105f19
    #   exp) $ git log-line Gemfile 5
    log-line = "!f() { git log -L $2,$2:$1; }; f"

    # svn-ref [svnのrivision]  gitのハッシュを確認できる(svnリビジョンを複数指定した時はsvnのリビジョンの昇順で表示する)
    #プログラム的にはdoのあとでretsvn(retsvn=${retsvn}' '${rev};) と ret(ret=${ret}' '`git log --grep "git-svn-id.*@${rev}" --pretty=%H;`;)を作っている.
    #それぞれにforで回しながら代入している.
    svn-ref = "!f() { ret=''; retsvn=''; for rev in `echo $@ | tr ' ' \"\n\" | sort -n | xargs echo;`; do retsvn=${retsvn}' '${rev}; ret=${ret}' '`git log --grep "git-svn-id.*@${rev}" --pretty=%H`; done; echo $ret; echo $retsvn; }; f"

    # svn-diff [オプション(--name-statusなど)]   git svn dcommitする前にdiffの確認ができる
    svn-diff = "!f() { git svn dcommit -n | grep diff | awk -F'diff-tree' -v opt=$@ '{print \"git diff \"opt\" \"$2}' | sh; }; f"
    # svn-br-rm   リモートのsvnから削除されたローカルのブランチやタグが表示される % git svn-br-rm |sh で実行することも出来る
    # svn-br-rm = "~/bin/git-svn-br-rm"

    #git-diff関係
    diffr = diff --word-diff-regex='\\w+|[^[:space:]]'
    diffrr = diff --color-words --word-diff-regex='\\w+|[^[:space:]]'
    diffw = diff --word-diff
    diffstat = diff --stat

    #git-cherry関連(コミット間のdiff)
    # colorized cheery -v
    cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
    ## git log部分の解説(以下のようなshowコマンドになっている) \047 => シングルコート
    # ・git show --date=short --no-notes --pretty=format:'%Cgreen+ %h %Cgreen%cd %Cblue%cn%x09%Creset%s' --summary 62b7de0'
    # ・awk内でのgetline、close  cmdは任意のコマンドとして（git show)を実行している
    #   getlineで読み込んだcmdのコマンドを明示的にcloseさせている

    # Commit Hash から、該当 Pull Request を見つける方法 - Qiita
    # http://qiita.com/awakia/items/f14dc6310e469964a8f7
    showpr = "!f() { git log --merges --oneline --reverse --ancestry-path $1...master | grep 'Merge pull request #' | head -n 1; }; f"
    openpr = "!f() { gh browse -- `git showpr $1 | cut -f5 -d' ' | sed -e 's|#|pull/|'`; }; f"
    pr  = "!f() { open $(gh browse -n)/pull/$(git rev-parse --abbrev-ref HEAD); }; f"
    prbrowse = "!f() { gh browse -- pull/$1; }; f"
    ### サンプル hoge = "!f() { your command }; f"
    ### ** '!'を前につけるとgitを取って展開したコマンドを実行できます **

    pushfwl = push --force-with-lease

[ghq]
    root = ~/workspace/gopath/src
    root = ~/workspace/ghq/src

# refs. http://qiita.com/hnakamur/items/cb04882cc69f2d1a7367
[credential]
    helper = osxkeychain

[url "https://github.com/"]
    insteadOf = git@github.com:

[init]
    defaultBranch = main
