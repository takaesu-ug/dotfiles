"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" netrw
"------------------------------------
" netrwは常にtree view
let g:netrw_liststyle = 1
" CVSと.で始まるファイルは表示しない
"let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"------------------------------------
" VimFiler
" K => 新規フォルダ
" N => 新規ファイル
" Space => 選択
" r => リネーム
"------------------------------------
" 「:e」でvimfilerを開くように変更
let g:vimfiler_as_default_explorer = 1
" vimfilerのセーフモードを解除 （切替はgs）
let g:vimfiler_safe_mode_by_default = 0

"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" tcomment.vim
"------------------------------------
let g:tcommentMapLeader1 = '<C-_>'       "(default: '<c-_>')
let g:tcommentMapLeader2 = '<Leader>'    "(default: '<Leader>_')
let g:tcommentMapLeaderOp1 = 'gc'        "(default: 'gc')
let g:tcommentMapLeaderOp2 = 'gC'        "(default: 'gC')

" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
\}

" マッピングを追加
function! SetErubyMapping2()
  nmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  nmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  nmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>

  vmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  vmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  vmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>
endfunction

" erubyのときだけ設定を追加
au FileType eruby call SetErubyMapping2()
" phpのときだけ設定を追加
au FileType php nmap <buffer><C-@>c :TCommentAs php_surround<CR>
au FileType php vmap <buffer><C-@>c :TCommentAs php_surround<CR>

"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags
"set tags+=~/.tags
let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
"map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'

"------------------------------------
" camelcasemotion.vim
"------------------------------------
" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e

"------------------------------------
" accelerated-jk
"------------------------------------
let g:accelerated_jk_acceleration_table = [10,5,3]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

"------------------------------------
" unite.vim
" uniteを開いた時に tab (C-i) でアクションのビューを表示する
"------------------------------------
" Start insert.
let g:unite_enable_start_insert = 1

" ヒストリー/ヤンク機能を有効化
let g:unite_source_history_yank_enable =1

" The prefix key.
nnoremap    [unite]   <Nop>
nmap        <Space><Space> [unite]

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
"ヒストリ/ヤンクを表示
nnoremap <silent> [unite]h :<C-u>Unite<Space>history/yank<CR>
"レジストリを表示
noremap <silent> [unite]r :<C-u>Unite<Space>register<CR>


" unite.vimを開いている間のキーマッピング
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  "" Overwrite settings.
  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC> <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200


"------------------------------------
" fugitive.vim , vimgrep(:vim)に関して
" http://qiita.com/yuku_t/items/0c1aff03949cb1b8fe6b
"------------------------------------
" 標準的な使い方  :vim {pattern} {file} | cw
" grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow

" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}


"------------------------------------
" quickrun.vim
"------------------------------------
" 初期化
let g:quickrun_config = {}
" キーバインド設定（デフォルト \ + r で実行)
nmap <Leader>rr <plug>(quickrun)
augroup QuickRunUnitTest
    autocmd!
    " Perl(*.t)ファイルのテストはproveを使うための追加
    autocmd BufWinEnter,BufNewFile *.t set filetype=perl.unit
    " Ruby用
    autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
let g:quickrun_config['perl.unit'] = {'command': 'prove', 'cmdopt': '-lv -MProject::Libs'}
let g:quickrun_config['ruby.rspec'] = {
    \'command'                  : 'rspec',
    \'cmdopt'                   : '-cfd',
    \'args'                     : "%{line('.')}",
    \'exec'                     : ['bundle exec %c %o %s:%a'],
    \'outputter/buffer/filetype': 'rspec-result',
    \'filetype'                 : 'rspec-result'
    \}


"------------------------------------
" Syntastic(シンタックスエラープラグイン)
"------------------------------------
"HTMLは色々エラるのでとりあえずチェックしない
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html'] }
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
"エラったときQuickfixが立ち上がる
let g:syntastic_auto_loc_list = 1
"jshint,gjshintがインストールされている場合優先されるように設定
let g:syntastic_javascript_checker = 'jshint'

" rubyのシンタックスチェックをanyenv以下の設定を見るようにする
" https://github.com/scrooloose/syntastic/wiki/Ruby:---mri
let g:syntastic_ruby_exec = '/Users/takaesu/.anyenv/envs/rbenv/shims/ruby'

"------------------------------------
" perl-support.vim
"------------------------------------
" 遅延ロードをしない .t のテストファイルを生成する時にエラーが出るため。。
" 起動など遅くなるなら解除する
let g:Perl_CreateMenusDelayed = 'no'

"------------------------------------
" vim-nodejs-complete
"------------------------------------
let g:node_usejscomplete = 1

"----------------------------------------
" open-browsere
"----------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>

"------------------------------------
" indent_guides
"------------------------------------
" http://qiita.com/alpaca_taichou/items/fb442cfa78f91634cfaa
" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
" デフォルトで有効にするファイルタイプ
au FileType coffee,javascript IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle"

"------------------------------------
" ctrlp.vim
"------------------------------------
" https://github.com/kien/ctrlp.vim
" バージョン管理関連は除外する
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

