"-------------------------------------------------------------------------------
" プラグインごとの設定 Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" YankRing.vim
"------------------------------------
" Yankの履歴参照
"nmap ,y ;YRShow<CR>
"
""------------------------------------
"" Align
""------------------------------------
"" Alignを日本語環境で使用するための設定
"let g:Align_xstrlen = 3

"------------------------------------
" netrw
"------------------------------------
" netrwは常にtree view
let g:netrw_liststyle = 1
" CVSと.で始まるファイルは表示しない
"let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"------------------------------------
" VimFiler
" K => 新規フォルダ
" N => 新規ファイル
" Space => 選択
" r => リネーム
"------------------------------------
" 「:e」でvimfilerを開くように変更
let g:vimfiler_as_default_explorer = 1
" vimfilerのセーフモードを解除 （切替はgs）
let g:vimfiler_safe_mode_by_default = 0

""------------------------------------
"" NERD_commenter.vim
""------------------------------------
"" コメントの間にスペースを空ける
"let NERDSpaceDelims = 1
""<Leader>xでコメントをトグル(NERD_commenter.vim)
"map <Leader>x, c<space>
"""未対応ファイルタイプのエラーメッセージを表示しない
"let NERDShutUp=1


"------------------------------------
" surround.vim
"------------------------------------
" s, ssで選択範囲を指定文字でくくる
nmap s <Plug>Ysurround
nmap ss <Plug>Yssurround
"let g:surround_{char2nr('e')} = "begin \r end"
"let g:surround_{char2nr('d')} = "do \r end"
let g:surround_{char2nr("-")} = ":\r"

"------------------------------------
" tcomment.vim
"------------------------------------
let g:tcommentMapLeader1 = '<C-@>'       "(default: '<c-_>')
let g:tcommentMapLeader2 = '<Leader>'    "(default: '<Leader>_')
let g:tcommentMapLeaderOp1 = 'gc'        "(default: 'gc')
let g:tcommentMapLeaderOp2 = 'gC'        "(default: 'gC')

" tcommentで使用する形式を追加
if !exists('g:tcomment_types')
  let g:tcomment_types = {}
endif
let g:tcomment_types = {
      \'php_surround' : "<?php %s ?>",
      \'eruby_surround' : "<%% %s %%>",
      \'eruby_surround_minus' : "<%% %s -%%>",
      \'eruby_surround_equality' : "<%%= %s %%>",
\}

" マッピングを追加
function! SetErubyMapping2()
  nmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  nmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  nmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>

  vmap <buffer> <C-@>c :TCommentAs eruby_surround<CR>
  vmap <buffer> <C-@>- :TCommentAs eruby_surround_minus<CR>
  vmap <buffer> <C-@>= :TCommentAs eruby_surround_equality<CR>
endfunction

" erubyのときだけ設定を追加
au FileType eruby call SetErubyMapping2()
" phpのときだけ設定を追加
au FileType php nmap <buffer><C-@>c :TCommentAs php_surround<CR>
au FileType php vmap <buffer><C-@>c :TCommentAs php_surround<CR>

"------------------------------------
" endwise.vim
"------------------------------------
"{{{
let g:endwise_no_mappings=1
"}}}

""------------------------------------
"" smartchr.vim
""------------------------------------
"" inoremap <expr> = smartchr#loop('=', '==', '=>')
"" inoremap <expr> . smartchr#loop('.',  '->', '=>')
"
""
"" " 演算子の間に空白を入れる
"" inoremap <buffer><expr> + smartchr#one_of(' + ', ' ++ ', '+')
"" inoremap <buffer><expr> +=  smartchr#one_of(' += ')
"" " inoremap <buffer><expr> - smartchr#one_of(' - ', ' -- ', '-')
"" inoremap <buffer><expr> -=  smartchr#one_of(' -= ')
"" " inoremap <buffer><expr> / smartchr#one_of(' / ', ' // ', '/')
"" inoremap <buffer><expr> /=  smartchr#one_of(' /= ')
"" inoremap <buffer><expr> * smartchr#one_of(' * ', ' ** ', '*')
"" inoremap <buffer><expr> *=  smartchr#one_of(' *= ')
"" inoremap <buffer><expr> & smartchr#one_of(' & ', ' && ', '&')
"" inoremap <buffer><expr> % smartchr#one_of(' % ', '%')
"" inoremap <buffer><expr> =>  smartchr#one_of(' => ')
"" inoremap <buffer><expr> <-   smartchr#one_of(' <-  ')
"" inoremap <buffer><expr> <Bar> smartchr#one_of(' <Bar> ', ' <Bar><Bar> ', '<Bar>')
"" inoremap <buffer><expr> , smartchr#one_of(', ', ',')
"" " 3項演算子の場合は、後ろのみ空白を入れる
"" inoremap <buffer><expr> ? smartchr#one_of('? ', '?')
"" " inoremap <buffer><expr> : smartchr#one_of(': ', '::', ':')
"
"" " =の場合、単純な代入や比較演算子として入力する場合は前後にスペースをいれる。
"" " 複合演算代入としての入力の場合は、直前のスペースを削除して=を入力
"" inoremap <buffer><expr> = search('¥(&¥<bar><bar>¥<bar>+¥<bar>-¥<bar>/¥<bar>>¥<bar><¥) ¥%#', 'bcn')? '<bs>= '  : search('¥(*¥<bar>!¥)¥%#', 'bcn') ? '= '  : smartchr#one_of(' = ', ' == ', '=')
"
"" " 下記の文字は連続して現れることがまれなので、二回続けて入力したら改行する
"" inoremap <buffer><expr> } smartchr#one_of('}', '}<cr>')
"" inoremap <buffer><expr> ; smartchr#one_of(';', ';<cr>')
"" "()は空白入れる
"" inoremap <buffer><expr> ( smartchr#one_of('( ')
"" inoremap <buffer><expr> ) smartchr#one_of(' )')
"
"" " if文直後の(は自動で間に空白を入れる
"" inoremap <buffer><expr> ( search('¥<¥if¥%#', 'bcn')? ' (': '('
"
"
""------------------------------------
"" DumbBuf.vim
""------------------------------------
""<Leader>b<Space>でBufferList
"let dumbbuf_hotkey = '<Leader>b<Space>'
"let dumbbuf_mappings = {
"    \ 'n': {
"        \'<Esc>': { 'opt': '<silent>', 'mapto': ':<C-u>close<CR>' }
"    \}
"\}
"let dumbbuf_single_key  = 1
"let dumbbuf_updatetime  = 1    " &updatetimeの最小値
"let dumbbuf_wrap_cursor = 0
"let dumbbuf_remove_marked_when_close = 1
"
""------------------------------------
"" vim-indent-guides
""------------------------------------
"nnoremap <silent> <Space>id :<C-u>IndentGuidesToggle<Enter>
"let g:indent_guides_auto_colors = 0
"let g:indent_guides_start_level = 4
"let g:indent_guides_guide_size = 1
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"if 'dark' == &background
"    hi IndentGuidesOdd  ctermbg=black
"    hi IndentGuidesEven ctermbg=darkgrey
"else
"    hi IndentGuidesOdd  ctermbg=white
"    hi IndentGuidesEven ctermbg=lightgrey
"endif
"
""------------------------------------
"" gundo.Vim
""------------------------------------
"" nmap U :<C-u>GundoToggle<CR>
"
"------------------------------------
" taglist.Vim
"------------------------------------
" 関数一覧
set tags=tags
"set tags+=~/.tags
let Tlist_Ctags_Cmd = '/Applications/MacVim.app/Contents/MacOS/ctags' " ctagsのパス
let Tlist_Show_One_File = 1               " 現在編集中のソースのタグしか表示しない
let Tlist_Exit_OnlyWindow = 1             " taglistのウィンドーが最後のウィンドーならばVimを閉じる
" let Tlist_Use_Right_Window = 1            " 右側でtaglistのウィンドーを表示
let Tlist_Enable_Fold_Column = 1          " 折りたたみ
"let Tlist_Auto_Open = 1                   " 自動表示
let Tlist_Auto_Update = 1
let Tlist_WinWidth = 30
"map <silent> <leader>tl :Tlist<CR>        " taglistを開くショットカットキー
nmap <F7> :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
nmap <Leader>tl :CMiniBufExplorer<CR>:TrinityToggleTagList<CR>:TMiniBufExplorer<CR>
let g:tlist_javascript_settings = 'javascript;c:class;m:method;f:function;p:property'

""------------------------------------
"" Srcexp
""------------------------------------
"" [Srcexpl] tagsを利用したソースコード閲覧・移動補助機能
"let g:SrcExpl_UpdateTags    = 1         " tagsをsrcexpl起動時に自動で作成（更新）
"let g:SrcExpl_RefreshTime   = 0         " 自動表示するまでの時間(0:off)
"let g:SrcExpl_WinHeight     = 9         " プレビューウインドウの高さ
"let g:SrcExpl_RefreshMapKey = "<Space>" " 手動表示のMAP
"let g:SrcExpl_GoBackMapKey  = "<C-b>"   " 戻る機能のMAP
"" Source Explorerの機能ON/OFF
"" nmap <F8> :CMiniBufExplorer<CR>:SrcExplToggle<CR>:TMiniBufExplorer<CR>
"
""------------------------------------
"" operator-camelize.vim
""------------------------------------
"" camel-caseへの変換
"map <Leader>u <Plug>(operator-camelize)
"map <Leader>U <Plug>(operator-decamelize)
"
""------------------------------------
"" operator-replace.vim
""------------------------------------
"" RwなどでYankしてるもので置き換える
"map R <Plug>(operator-replace)
"
""------------------------------------
"" sumartword.vim
""------------------------------------
"noremap ,w  w
"noremap ,b  b
"noremap ,e  e
"noremap ,ge  ge
"
"map W  <Plug>(smartword-w)
"map B  <Plug>(smartword-b)
"map E  <Plug>(smartword-e)
"map ge  <Plug>(smartword-ge)


"------------------------------------
" camelcasemotion.vim
"------------------------------------

" <Shift-wbe>でCameCaseやsnake_case単位での単語移動
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
" text-objectで使用できるように
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie

"------------------------------------
" vimshell
"------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'
let g:vimshell_enable_smart_case = 1

if has('win32') || has('win64')
  " Display user name on Windows.
  let g:vimshell_prompt = $USERNAME."% "
else
  " Display user name on Linux.
  let g:vimshell_prompt = $USER."% "

  call vimshell#set_execute_file('bmp,jpg,png,gif', 'gexe eog')
  call vimshell#set_execute_file('mp3,m4a,ogg', 'gexe amarok')
  let g:vimshell_execute_file_list['zip'] = 'zipinfo'
  call vimshell#set_execute_file('tgz,gz', 'gzcat')
  call vimshell#set_execute_file('tbz,bz2', 'bzcat')
endif

function! g:my_chpwd(args, context)
  call vimshell#execute('echo "chpwd"')
endfunction
function! g:my_emptycmd(cmdline, context)
  call vimshell#execute('echo "emptycmd"')
  return a:cmdline
endfunction
function! g:my_preprompt(args, context)
  call vimshell#execute('echo "preprompt"')
endfunction
function! g:my_preexec(cmdline, context)
  call vimshell#execute('echo "preexec"')

  if a:cmdline =~# '^\s*diff\>'
    call vimshell#set_syntax('diff')
  endif
  return a:cmdline
endfunction

autocmd FileType vimshell
\ call vimshell#altercmd#define('g', 'git')
\| call vimshell#altercmd#define('i', 'iexe')
\| call vimshell#altercmd#define('l', 'll')
\| call vimshell#altercmd#define('ll', 'ls -la')
\| call vimshell#hook#set('chpwd', ['g:my_chpwd'])
\| call vimshell#hook#set('emptycmd', ['g:my_emptycmd'])
\| call vimshell#hook#set('preprompt', ['g:my_preprompt'])
\| call vimshell#hook#set('preexec', ['g:my_preexec'])

command! Vs :VimShell


"------------------------------------
" unite.vim
"------------------------------------
" The prefix key.
nnoremap    [unite]   <Nop>
nmap        f [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>

" 全部乗せ
nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

"let g:yankring_zap_keys = ""
"一旦unite-railsは聞かないので削除
"" from basyura/unite-rails
"nnoremap <silent> [unite]rm  :<C-u>Unite -no-split rails/model<CR>
"nnoremap <silent> [unite]rc  :<C-u>Unite -no-split rails/controller<CR>
"nnoremap <silent> [unite]rv  :<C-u>Unite -no-split rails/view<CR>
"nnoremap <silent> [unite]rl  :<C-u>Unite -no-split rails/lib<CR>
"nnoremap <silent> [unite]rj  :<C-u>Unite -no-split rails/javascript<CR>
"nnoremap <silent> [unite]rs  :<C-u>Unite -no-split rails/spec<CR>


autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>


" agとUnite.vim http://blog.monochromegane.com/blog/2013/09/18/ag-and-unite/
" grep検索
"nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> ,g  :<C-u>Unite grep: -buffer-name=search-buffer<CR>
" カーソル位置の単語をgrep検索
"nnoremap <silent> ,cg :<C-u>Unite grep:. -buffer-name=search-buffer<CR><C-R><C-W>
nnoremap <silent> ,cg :<C-u>Unite grep: -buffer-name=search-buffer<CR><C-R><C-W>
" grep検索結果の再呼出
nnoremap <silent> ,r  :<C-u>UniteResume search-buffer<CR>
" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif


"------------------------------------
" quickrun.vim
"------------------------------------
" 初期化
let g:quickrun_config = {}
" キーバインド設定（デフォルト \ + r で実行)
nmap <Leader>rr <plug>(quickrun)
augroup QuickRunUnitTest
    autocmd!
    " Perl(*.t)ファイルのテストはproveを使うための追加
    autocmd BufWinEnter,BufNewFile *.t set filetype=perl.unit
    " Ruby用
    autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
let g:quickrun_config['perl.unit'] = {'command': 'prove', 'cmdopt': '-lv -MProject::Libs'}
let g:quickrun_config['ruby.rspec'] = {'command': 'rspec'}


"------------------------------------
" Pydiction
"------------------------------------
"let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic(シンタックスエラープラグイン)
"------------------------------------
"HTMLは色々エラるのでとりあえずチェックしない
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html'] }
" エラー行をsignで表示する
let g:syntastic_enable_signs = 1
" 可能ならhighligt表示する
let g:syntastic_enable_highlighting = 1
"エラったときQuickfixが立ち上がる
let g:syntastic_auto_loc_list = 1
"jshint,gjshintがインストールされている場合優先されるように設定
let g:syntastic_javascript_checker = 'jshint'


"------------------------------------
" toggle.vim
"------------------------------------
"imap <C-A> <Plug>ToggleI
"nmap <C-A> <Plug>ToggleN
"vmap <C-A> <Plug>ToggleV

"let g:toggle_pairs = { 'and':'or', 'or':'and', 'if':'unless', 'unless':'if', 'yes':'no', 'no':'yes', 'enable':'disable', 'disable':'enable', 'pick':'reword', 'reword':'fixup', 'fixup':'squash', 'squash':'edit', 'edit':'exec', 'exec':'pick' }


"------------------------------------
" mojo.vim
"http://www.vim.org/scripts/script.php?script_id=3168
"設定方法:https://github.com/yko/mojo.vim
"------------------------------------
let mojo_highlight_data = 1
let mojo_disable_html = 1
let mojo_no_helpers = 1

"------------------------------------
" perl-support.vim
"------------------------------------
" 遅延ロードをしない .t のテストファイルを生成する時にエラーが出るため。。
" 起動など遅くなるなら解除する
let g:Perl_CreateMenusDelayed = 'no'

"------------------------------------
" vim-nodejs-complete
"------------------------------------
let g:node_usejscomplete = 1

"----------------------------------------
" open-browsere
"----------------------------------------
" カーソル下のURLをブラウザで開く
nmap <Leader>o <Plug>(openbrowser-open)
vmap <Leader>o <Plug>(openbrowser-open)
" ググる
nnoremap <Leader>g :<C-u>OpenBrowserSearch<Space><C-r><C-w><Enter>
