# お遊び
function beer() {
  ruby -e 'C=`stty size`.scan(/\d+/)[1].to_i;S="\xf0\x9f\x8d\xba";a={};puts "\033[2J";loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print "\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S} \033[0;0H"};$stdout.flush;sleep 0.01}'
}

# tmux init
## tmuxのカラー設定 itermでtmuxを使い、Vimのカラースキームを有効にする
## http://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode

# alias tmux="TERM=screen-256color-bce tmux -2"
function tmux_init() {
  SESS='takamax'
  if [ $# -eq 1 ]; then
    SESS=$1
  fi

  tmux -f ~/.tmux.conf new-session -d -s $SESS
  tmux -f ~/.tmux.conf new-window -d -k -t $SESS:1 -n dev1
  tmux -f ~/.tmux.conf new-window -d -k -t $SESS:2 -n dev2
  tmux -f ~/.tmux.conf new-window -d -k -t $SESS:3 -n dev3
  tmux -f ~/.tmux.conf new-window -d -k -t $SESS:4 -n db
  tmux -f ~/.tmux.conf new-window -d -k -t $SESS:5 -n run
  tmux -f ~/.tmux.conf attach-session -t $SESS
}

# whoisコマンドエイリアス(日本語文字化け対応） aliasコマンドでは引数を処理できないようだ
if [ -f `brew --prefix`/bin/nkf ]; then
  function whois() {
    /usr/bin/whois $@ | `brew --prefix`/bin/nkf -w
  }
fi

# w3mでgoogle検索
function google() {
  local str opt
  if [ $# != 0 ]; then
    for i in $*; do
        str="$str+$i"
    done
    str=`echo $str | sed 's/^\+//'` #行頭の+を除く
    opt='search?num=50&hl=ja&lr=lang_ja'
    opt="${opt}&q=${str}"
  fi
  w3m http://www.google.co.jp/$opt
}

# w3mでALC検索
function alc() {
  if [ $# != 0 ]; then
    w3m +38 "http://eow.alc.co.jp/$*/UTF-8/?ref=sa"
  else
    w3m "http://www.alc.co.jp/"
  fi
}

# w3m でGoogle translate English->Japanese
function gte() {
  google_translate "$*" "en-ja"
}

# w3m でGoogle translate Japanese->English
function gtj() {
  google_translate "$*" "ja-en"
}

# 実行方法
# google_translate "検索文字列" [翻訳オプション(en-ja 英語->日本語)]
function google_translate() {
  local str opt cond

  if [ $# != 0 ]; then
    str=`echo $1 | sed -e 's/  */+/g'` # 1文字以上の半角空白を+に変換
    cond=$2
    if [ $cond = "ja-en" ]; then
      # ja -> en 翻訳
      opt='?hl=ja&sl=ja&tl=en&ie=UTF-8&oe=UTF-8'
    else
      # en -> ja 翻訳
      opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'
    fi
  else
    opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'
  fi

  opt="${opt}&text=${str}"
  w3m +13 "http://translate.google.com/${opt}"
}

function code () {
  if [[ $# = 0 ]]
  then
    open -a "Visual Studio Code"
  else
    [[ $1 = /* ]] && F="$1" || F="$PWD/${1#./}"
    open -a "Visual Studio Code.app" --args "$F"
  fi
}

## pecoを使ったコマンド関連
# function ここに関数の名前() {
#         BUFFER="ここにコマンド" #何をコマンドラインに表示するか
#         CURSOR=$#BUFFER # カーソル位置を行末に設定
#         # BUFFER=$BUFFER\' # カーソルを括弧内に移動する場合
# }
# zle -N ここに関数の名前
# bindkey 'ここに設定したいキー' ここに関数の名前
if type peco > /dev/null 2>&1; then
  # Alias
  alias ghc='cd $(ghq list -p | peco)'
  alias gho='gh-open $(ghq list -p | peco)'
  alias sshlist="awk 'match($1,/^Host$/){print $2}' ~/.ssh/config | peco | xargs -o ssh"

  ## .ssh/config の Hostから一覧を取得してSSHする
  function peco-sshlist () {
    #BSD以外のOSでのやり方
    #awk 'match($1,/^Host$/){print $2}' ~/.ssh/config | xargs sh -c 'ssh "$@" </dev/tty' ssh
    local host=$(awk 'match($1,/^Host$/){print $2}' ~/.ssh/config | peco)
    if [ -n "$host" ]; then
      BUFFER="ssh ${host}"
      zle accept-line  # accept-line を実行することでコマンドを実行する
    fi
    zle clear-screen
  }
  zle -N peco-sshlist
  bindkey '^s' peco-sshlist

  ## peco-で始まるfunctionを検索する
  function peco-function-list () {
    local selected=$(functions | grep "^.*\ ()\ {" | sed -e "s| () {||" | grep peco- | grep -v function-list | peco --query "$LBUFFER")
    if [ -n "$selected" ]; then
      ${selected}
    fi
  }
  zle -N peco-function-list
  bindkey '^k' peco-function-list

  ## pecoでghqのソースディレクトリを開く
  function peco-src () {
    local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
      BUFFER="cd ${selected_dir}"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-src
  bindkey '^]' peco-src

  ## gh-openエイリアスコマンドのショートカット設定
  function peco-gh-open () {
    gh-open $(ghq list -p | peco)
  }
  zle -N peco-gh-open
  bindkey '^g' peco-gh-open

  ## ^r でのコマンドヒストリにpecoを使う
  function peco-select-history() {
    local tac
    if which tac > /dev/null; then
      tac="tac"
    else
      tac="tail -r"
    fi

    # http://qiita.com/richmikan@github/items/3c74212b0d8dec9bd00f
    NL=$(printf '\\\012_')
    NL=${NL%_}

    BUFFER=$(\history -n 1 | \
      eval $tac | \
      peco --query "$LBUFFER" --prompt "[histories] >" | sed -e 's/\\n/'"$NL"'/g')
      # peco --query "$LBUFFER" --prompt "[histories] >" | tr '\\n' '\n')
    CURSOR=$#BUFFER
    zle clear-screen
  }
  zle -N peco-select-history
  bindkey '^r' peco-select-history


  function peco-bundle-open() {
    # 最低限動作するなら以下の４行だけでいいが、ZLEのbind_keyで動かすと改行されずに次の入力に移らないない。
    # local package=$(bundle list | awk 'NR>1 {print $2}' |peco)
    # if [ -n "$package" ]; then
    #   cd `bundle show $package`
    # fi
    local package=$(bundle list | awk 'NR>1 {print $2}' |peco)
    if [ -n "$package" ]; then
      BUFFER="cd `bundle show $package`"
      zle accept-line
    fi
    zle clear-screen
  }
  zle -N peco-bundle-open
  bindkey '^o' peco-bundle-open

  # http://qiita.com/sona-tar/items/fe401c597e8e51d4e243
  function peco-git-hash() {
    git log --oneline | peco | awk '{print $1}'
  }
  alias git-hash='peco-git-hash'
  alias -g GH='$(peco-git-hash)'
  # GHの使い方
  # git diff GH

  function peco-git-changed-files() {
    git status --short | peco | awk '{print $2}'
  }
  alias git-changed-files='peco-git-changed-files'
  alias -g GF='$(peco-git-changed-files)'
  # GFの使い方
  # git add GH
  # git co GH


  # git ls-tree - Qiita http://qiita.com/sasaplus1/items/cff8d5674e0ad6c26aa9
  function peco-git-cd() {
    cd $(git ls-tree -dr --name-only HEAD | peco)
  }


  # http://k0kubun.hatenablog.com/entry/2014/07/06/033336
  function peco-find-file() {
    if git rev-parse 2> /dev/null; then
      source_files=$(git ls-files)
    else
      source_files=$(find . -type f)
    fi
    selected_files=$(echo $source_files | peco --prompt "[find files] >")
    result=''
    for file in $selected_files; do
      result="${result}$(echo $file | tr '\n' ' ')"
    done
    BUFFER="${BUFFER}${result}"
    CURSOR=$#BUFFER  # カーソル位置を行末に設定
    zle redisplay
  }
  zle -N peco-find-file
  bindkey '^q' peco-find-file
fi


if type fzf >/dev/null 2>&1; then
  # https://github.com/junegunn/fzf/wiki/examples
  export FZF_DEFAULT_OPTS="--reverse --inline-info"
  export FZF_DEFAULT_COMMAND='ag -g ""'

  # vim関連
  alias vif='vim $(fzf)'
  alias vimf='vim $(fzf)'

  # Process
  ## fkill - kill process
  function fkill() {
    pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    if [ "x$pid" != "x" ]; then
      kill -${1:-9} $pid
    fi
  }

  # Git
  ## fbr - checkout git branch (including remote branches)
  function fgbr() {
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
    branch=$(echo "$branches" |
             fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) && # -dでheightを設定して +m でマルチ選択させないようにしている
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
  }

  ## fco - checkout git branch/tag
  function fgco() {
    local tags branches target
    tags=$(
      git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
    branches=$(
      git branch --all | grep -v HEAD             |
      sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
      sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
    target=$(
      (echo "$tags"; echo "$branches") |
      fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
    git checkout $(echo "$target" | awk '{print $2}')
  }

  ## fcs - get git commit sha
  ## example usage: git rebase -i `fcs`
  function fgcs() {
    local commits commit
    commits=$(git log --color=always --pretty=oneline --abbrev-commit --reverse) &&
    commit=$(echo "$commits" | fzf --tac +s +m -e --ansi --reverse) &&
    echo -n $(echo "$commit" | sed "s/ .*//")
  }
fi

# refs. http://qiita.com/knqyf263/items/01ff865bbab2f5e48d1e
if type pet >/dev/null 2>&1; then
  function prev() {
    PREV=$(fc -lrn | head -n 1)
    sh -c "pet new `printf %q "$PREV"`"
  }

  function pet-select() {
    BUFFER=$(pet search --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle redisplay
  }
  zle -N pet-select
  bindkey '^v' pet-select
fi
