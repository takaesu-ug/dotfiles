# [tmuxチートシート - Qiita](http://qiita.com/nmrmsys/items/03f97f5eabec18a3a18b)
# [達人に学ぶ.tmux.confの基本設定 - Qiita](http://qiita.com/succi0303/items/cb396704493476373edf)

# ESCキーを良くする
set -s escape-time 0
# スクロール行数（デフォルト2000）
set-option -g history-limit 10000
# ステータス行を白背景に黒文字にする。
set-option -g status-bg white
set-option -g status-fg black
# アクティブウィンドウの表示
set-window-option -g window-status-current-style "fg=black,bg=yellow"
# ステータス行の設定
set -g status-left-length 40
set -g status-left "#[fg=black][#S] "
set -g status-right "#[fg=black]%Y-%m-%d(%a) %H:%M"
# リフレッシュの間隔を設定する(デフォルト 15秒)
set -g status-interval 60

# ペインの区切り線のスタイル
set-window-option -g pane-active-border-style "fg=cyan,bg=black"
set-option -g pane-border-style "fg=cyan,bg=black"

# tabを閉じるとタブの番号を振り直す
# set-option -g renumber-windows on

# ウィンドウ名が実行中のコマンド名になるのを止める。
set-window-option -g automatic-rename off

# ウインドウの最初の番号を指定する
set-option -g base-index 1

# key Bind変更（デフォルトプレフィックス変更） C-b -> C-t
set-option -g prefix C-t
unbind-key C-b
bind-key C-t send-prefix

# 入力モードをviに切り替える
set-window-option -g mode-keys vi

# ペインのサイズ変更をvim風にする
# ＜Prefix＞＜Ctrl + { h | i | j | k }＞
# ＜Ctrl + { h | i | j | k }＞は連続して入力可能。
# 1回押すごとに5行(列)境界を移動させる。
bind -r C-h resize-pane -L 5
bind -r C-l resize-pane -R 5
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5

#マウス関連設定 http://mojavy.com/blog/2011/12/13/tmux_advent_calendar_2_2011/
#マウススクロール http://d.hatena.ne.jp/a666666/20110425/1303747389
set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on

# tmuxでvimのcolorscheme（というか.tmux.conf）が反映されない場合の対処法 - Qiita
# http://qiita.com/omega999/items/c1ff60ac60b093c8676c
set-option -g default-terminal screen-256color

## クリップボードコピー（ Macは別途tmux-MacOSX-pasteboardを入れる ）
# http://d.hatena.ne.jp/tmatsuu/20111220/1324399472
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard
#   git cloneして `make reattach-to-user-namespace` を実行したら実行ファイルができるので
#   それを ~/bin にリンクを貼ってパスを通す
#
# reattach-to-user-namespace は homebrew でインストールしてもいい

# Linux 用 コピーは'bind-key C-c'を使うが、貼り付けはコマンド＋vで貼り付ける
bind-key C-c run "tmux save-buffer - | xcopy -i"
# bind-key C-v run "xcopy -o | tmux load-buffer - && tmux paste-buffer"
#
# Mac 用 コピーは'bind-key C-c'を使うが、貼り付けはコマンド＋vで貼り付ける
set-option -g default-command "reattach-to-user-namespace -l $SHELL"
bind-key C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
# bind-key C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux"

# prefix + r で設定ファイルを再読み込み
unbind r
bind   r source-file ~/.tmux.conf

# 一時ペインでコマンドを実行する
bind-key a command-prompt -p "Alc:" "split-window 'source ~/dotfiles/.zshrc.command; alc %%'"
bind-key m command-prompt -p "Man:" "split-window 'man %%'"
# bind-key g command-prompt -p "Google Translate en->ja:" "split-window 'source ~/dotfiles/.zshrc.command; kte %%'"
# bind-key G command-prompt -p "Google Translate ja->en:" "split-window 'source ~/dotfiles/.zshrc.command; gtj %%'"
# bind-key g command-prompt -p "termit en->ja:" "split-window -v -l 15 'termit en ja -s %% | less'"
# bind-key G command-prompt -p "termit ja->en:" "split-window -v -l 15 'termit ja en -s %% | less'"
# bind-key C-p split-window 'pry'
# bind-key C-r split-window 'bundle exec rails console'
# bind-key C-v split-window -h 'bundle exec rails console'

# yusabana/custom の tmux-patched の設定
# 分割線などのambiguisous関連の文字を半角文字にする
set -g pane-border-ascii on
